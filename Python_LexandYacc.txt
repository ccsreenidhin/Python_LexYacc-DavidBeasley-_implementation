/*
	Pre-requirement:
		use python 3
		the [not required at this stage] procedures are a plus but dont' need to be implemented

	Main goal:
		Build a parser of the basic instructions AND, OR, NOT, ==, <, >, if, else and in.

	Input:
		variable data: contains an array key-value based (for example: key "a" corresponds to value "5")
		variables operation_xxx: strings to be binded and executed

	Output:
		integer (clausole "return" containend in the variable operation_xxx)
		exceptions if any occurs

	Process:
		described in the pseudocode

	Key concepts:
		security - bind properly the procedures in order to avoid any key injection
		performance - execution strings will be always simple, nothing to bear in mind for performance
		configurable - the information in data accessible by "@key" could be more structured in the future (for instance, another JSON embedded or an array).
			For instance, let's give the following value:
			data("a") = {
				"v_a": [
					{
						"el": 1
					},
					{
						"el": 2
					},
				]
			}
			then a placeholder could be "@a.v_a[2]" ==> 2
			It's not required to build any complex over-structure, but the high-level code architecture should be able to adapt according to this behaviour.
*/


data = {
	"a": "5",
	"b": "6",
	"name": "test",
	"value": "a",
	"list": ["a", "b", "c"]
}

// Note: feel free to add a ';' to make the syntax easier to parse
operation_a = "
	if (@a > @b) return 1
	else if (@a < @b) return 2
	else return 3"

operation_b = "
	if (@name == 'test') return 1
	else return 2"

operation_c = "
	if (@name in @list) return 1
	else return 2"

foreach operation_xxx in (operation_a, operation_b, operation_c) {
	// [not required at this stage] upper/lower case uniforming
	uppercase(operation_xxx)

	// [not required at this stage] check if there is any syntactical/grammatical error
	parse operation_xxx

	// [not required at this stage] Build a DAG (Directed Acyclic Graph) to avoid any deadlock (only for "for" or "while" instruction flows)
	detect_deadlock(operation_xxx)

	// Bind the placeholders "@xxx" with the correspondent variable in the data array
	// Note: the value '@' indicates the beginning of a placeholder
	try
		search every "@key" into string operation_xxx
	catch raise exception

	foreach key found:
		try
			bind data(key) into placeholder "@key"
		catch raise exception

	// Execute the string
	try
		execute binded string operation_xxx into result
	catch raise exception 

	print result

}
/*
	Example for operation_a:

	operation_a := "if (@a > @b) return 1 else if (@a < @b) return 2 else return 3"

	// After binding:
	operation_a := "if (5 > 6) return 1 else if (5 < 5) return 2 else return 3"

	// Executing
	execute operation_a and save result into r

	print r		// 2
*/